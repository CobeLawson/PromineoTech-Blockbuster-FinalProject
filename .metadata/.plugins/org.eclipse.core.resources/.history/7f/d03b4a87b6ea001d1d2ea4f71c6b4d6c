package com.promineotech.blockbuster.controller;

import static org.assertj.core.api.Assertions.assertThat;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpEntity;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import com.promineotech.blockbuster.entity.Rental;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
@ActiveProfiles("test")
@Sql(scripts = {
		"classpath:flyway/migrations/blockbuster.sql"},
		config = @SqlConfig(encoding = "utf-8"))
class CreateRentalTest {
	@Autowired
	private TestRestTemplate restTemplate;
	
	@LocalServerPort
	private int serverPort;

	@Test
	void testCreateRentalReturnsSuccess201() {
		// Given: a rental as JSON
		String body = createRentalBody();
		String uri = String.format("http://localhost:%d/transactions", serverPort);
		log.info(uri);
		HttpHeaders headers = new HttpHeaders();
  	headers.setContentType(MediaType.APPLICATION_JSON);
		HttpEntity<String> bodyEntity = new HttpEntity<>(body, headers);
		log.info("Rental is created.");
		log.info(bodyEntity.toString());
		
		// When: the rental is sent
		ResponseEntity<Rental> response = 
				restTemplate.exchange(uri, HttpMethod.POST, bodyEntity, Rental.class);
		log.info("Rental is sent.");
		
		// Then: a 201 status is returned
		log.info(response.getStatusCode().toString());
		assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);
		assertThat(response.getBody()).isNotNull();
		log.info("Status is returned.");
		
		// And: the returned rental is correct
		
		Rental rental = response.getBody();
		assertThat(rental.getAdministrator().getAdministratorName()).isEqualTo("David Lynch");
		assertThat(rental.getCustomer().getCustomerName()).isEqualTo("Keanu Reeves");
		assertThat(rental.getDate().toString()).isEqualTo("2023-05-03");
		assertThat(rental.getDueDate().toString()).isEqualTo("2023-05-08");
		assertThat(rental.getPrice().toString()).isEqualTo("8.00");
		assertThat(rental.getProductList()).hasSize(2);
		
		log.info("Rental is correct.");
		
	}

	protected String createRentalBody() {
		// @formatter:off
		return "{\r\n"
				+ " \"administrator\":\"David Lynch\",\r\n"
				+ " \"customer\":\"Keanu Reeves\",\r\n"
				+ " \"date\":\"2023-05-03\",\r\n"
				+ " \"due_date\":\"2023-05-08\",\r\n"
				+ " \"price\":\"8.00\",\r\n"
				+ " \"product_list\":[\r\n"
						+" \"Goodfellas\",\r\n"
						+" \"Dark Souls\",\r\n"
					+" ]\r\n"
				+ "}";
		// @formatter:on
	}

}
